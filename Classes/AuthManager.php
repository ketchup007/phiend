<?php
/* namespace Phiend; */

/**
 * @package phiend
 * @author Maciej 'hawk' Jarzebski
 * @version $Id: AuthManager.class.php,v 1.5 2003/09/27 16:23:54 cryonax Exp $
 */

/**
 * Authentication result: user successfully authenticated.
 */
define('_PHIEND_AUTH_OK', 1);

/**
 * Authentication result: user not found in storage.
 */
define('_PHIEND_AUTH_NO_USER', 2);

/**
 * Authentication result: user found, but password is incorrect.
 */
define('_PHIEND_AUTH_BAD_PASSWORD', 3);

/**
 * Authentication result: user has insufficient roles for chosen action.
 */
define('_PHIEND_AUTH_INSUFFICIENT_ROLES', 4);

/**
 * Authentication result: unspecified error occured.
 */
define('_PHIEND_AUTH_FAILURE', 5);

/**#@+
 * Name of variable put in session.
 */
define('_PHIEND_SESSION_USER_NAME', '_phiend_userName');
define('_PHIEND_SESSION_IP_ADDRESS', '_phiend_ipAddress');
define('_PHIEND_SESSION_USER_ROLES', '_phiend_userRoles');
/**@#-*/

/**
 * The authentication engine for Phiend.
 *
 * Created by ActionController if authentication is used.
 * Has its own configuration output file (auth-drivers.php), created by ConfigParser
 * basing on main configuration file.
 * @package phiend
 */
class AuthManager {

	/**
	 * Constructor.
	 *
	 * Only stores the arrays given in parameters for future use.
	 * @param array $sessionConfig Session configuration as generated by ConfigParser
	 * @param array $authConfig Auth configuration as generated by ConfigParser
	 */
	function __construct($sessionConfig, $authConfig) {
		$this->_sessionConfig = $sessionConfig;
		$this->_authConfig = $authConfig;
		require_once CONFIG_OUTPUT_DIR . 'auth-drivers.php';
	}
	
	/**
	 * Authehticate a user.
	 *
	 * Performs all authentication, which includes logging the user out (i.e. invalidating their session) if necessary,
	 * checking for login and password sent as POST, checking for existing session (a cookie) and calling auth drivers.
	 * User information is not given as a parameter, because it will be read from the cookie or POST variables.
	 * @return integer The result of authentication - one of _PHIEND_AUTH_something constants defined in this file
	 * @param array $actionConfig Action configuration as generated by ConfigParser
	 */
	function performAuth($actionConfig) {
		$this->_actionConfig = $actionConfig;
		if ($this->_actionConfig['force-logout'] == true) {
			$this->_validPassword = false;
			$this->_validSid = false;
			session_unset();
			trigger_error('Logout forced', E_USER_NOTICE);
		}
		$loginResult = _PHIEND_AUTH_FAILURE;
		if ($this->_actionConfig['accept-password'] == true) {
			$loginResult = $this->_login($actionConfig);
			if ($loginResult == _PHIEND_AUTH_OK) {
				trigger_error('Login successful', E_USER_NOTICE);
				return _PHIEND_AUTH_OK;
			}
		}
		$sidResult = _PHIEND_AUTH_FAILURE;
		if ($this->_actionConfig['accept-sid'] == true) {
			$sidResult = $this->_verifySid($actionConfig);
			if ($sidResult == _PHIEND_AUTH_OK) {
				trigger_error('Using previous session', E_USER_NOTICE);
				return _PHIEND_AUTH_OK;
			}
		}
		if ($this->_actionConfig['required-roles'] == '') {
			trigger_error('No roles required', E_USER_NOTICE);
			return _PHIEND_AUTH_OK;
		}
		if ($loginResult == _PHIEND_AUTH_FAILURE) {
			return $sidResult;
		} else {
			return $loginResult;
		}
	}

//--- subroutines -------------------------------------------------------------
	
	/**
	 * Create a new session.
	 *
	 * Check for login and password in POST variables, then try authenticate user using these.
	 * Call auth drivers and check if user has required roles.
	 * @return integer The result of authentication - one of _PHIEND_AUTH_something constants defined in this file
	 * @access private
	 */
	function _login() {
		if (!isset($_POST['login']) || !isset($_POST['password']) || strstr($_POST['login'], ' ')) {
			trigger_error('No login and/or password in POST', E_USER_NOTICE);
			return _PHIEND_AUTH_FAILURE;
		}
		session_unset();
		$this->userName = $_POST['login'];
		$password = $_POST['password'];
		$this->_getUserRoles($this->userName, $password);
			if (!is_string($this->userRoles)) {
				$tmp = $this->userRoles;
				$this->userRoles = '';
				trigger_error('User lookup failed, code ' . $tmp, E_USER_NOTICE);
				return $tmp;
			}
		if ($this->_verifyRoles() == false) {
			return _PHIEND_AUTH_INSUFFICIENT_ROLES;
		}
		$_SESSION[_PHIEND_SESSION_USER_NAME] = $this->userName;
		$_SESSION[_PHIEND_SESSION_IP_ADDRESS] = $_SERVER['REMOTE_ADDR'];
		if ($this->_authConfig['cache-user-roles'] == true) {
			$_SESSION[_PHIEND_SESSION_USER_ROLES] = $this->userRoles;
		}
		return _PHIEND_AUTH_OK;
	}
	
	/**
	 * Authenticate user basing on existing session.
	 *
	 * Check for session cookie. Check if session contains necessary variables.
	 * Call auth drivers and check if user has required roles.
	 * @return integer The result of authentication - one of _PHIEND_AUTH_something constants defined in this file
	 * @access private
	 */
	function _verifySid() {
		if (!isset($_COOKIE[$this->_sessionConfig['session-name']])) {
			trigger_error('No session', E_USER_NOTICE);
			return _PHIEND_AUTH_FAILURE;
		}			
		if (!isset($_SESSION[_PHIEND_SESSION_USER_NAME]) ||
			!isset($_SESSION[_PHIEND_SESSION_IP_ADDRESS])
		) {
			trigger_error('Session is empty', E_USER_NOTICE);
			return _PHIEND_AUTH_FAILURE;
		}
		if (($this->_sessionConfig['check-ip'] == true) && ($_SESSION[_PHIEND_SESSION_IP_ADDRESS] != $_SERVER['REMOTE_ADDR'])) {
			trigger_error('Wrong IP, expecting ' . $_SESSION[_PHIEND_SESSION_IP_ADDRESS] . ', received ' . $_SERVER['REMOTE_ADDR'], E_USER_ERROR);
			return _PHIEND_AUTH_FAILURE;
		}
		$this->userName = $_SESSION[_PHIEND_SESSION_USER_NAME];
		if (($this->_authConfig['cache-user-roles'] == true) && isset($_SESSION[_PHIEND_SESSION_USER_ROLES])) {
			$this->userRoles = $_SESSION[_PHIEND_SESSION_USER_ROLES];
		} else {
			$this->_getUserRoles($this->userName, null);
			if (!is_string($this->userRoles)) {
				$tmp = $this->userRoles;
				$this->userRoles = '';
				trigger_error('User lookup failed, code ' . $tmp, E_USER_NOTICE);
				return $tmp;
			}
		}
		if ($this->_verifyRoles() == false) {
			return _PHIEND_AUTH_INSUFFICIENT_ROLES;
		}
		return _PHIEND_AUTH_OK;
	}

	/**
	 * Check if user has roles required for action.
	 *
	 * Assume that user roles and required roles are held in $this->userRoles and $this->_actionConfig['required-roles'].
	 * @return boolean Whether user's roles are sufficient to access action
	 * @access private
	 */
	function _verifyRoles() {
		if (strlen($this->_actionConfig['required-roles']) == 0) {
			return true;
		}
		$userRolesArray = explode(' ', $this->userRoles);
		$requiredRolesArray = explode(' ', $this->_actionConfig['required-roles']);
		$missingRoles = array_diff($requiredRolesArray, $userRolesArray);
		if (count($missingRoles) == 0) {
			return true;
		}
		trigger_error('Insufficient roles for user ' . $this->userName . ', missing: ' . implode(' ', $missingRoles), E_USER_NOTICE);
		return false;
	}

	/**
	 * Call auth drivers to get user roles.
	 *
	 * Call auth drivers until one finds the user.
	 * There is no return value. Instead, user roles will be placed in $this->userRoles.
	 * @param string $userName Name of user to find
	 * @param string $password Plain-text password for this user; if it is null, search will be based on user name only
	 * @access private
	 */
	function _getUserRoles($userName, $password = null) {
		foreach ($this->_authDrivers as $authDriver) {
			$this->userRoles = $authDriver->getRoles($userName, $password);
			if (is_string($this->userRoles) || ($this->userRoles == _PHIEND_AUTH_BAD_PASSWORD)) {
				return;
			}
		}
	}

//--- variables ---------------------------------------------------------------
		
	/**
	 * Name of current user. Set by authenticating functions.
	 * @var string
	 * @access public
	 */
	var $userName = '';

	/**
	 * Roles of current user. Set by authenticating functions.
	 * @var string
	 * @access public
	 */
	var $userRoles = '';
	
	/**
	 * Session configuration, set by constructor and never modified.
	 * @var array
	 * @access private
	 */
	var $_sessionConfig;

	/**
	 * Auth configuration, set by constructor and never modified.
	 * @var array
	 * @access private
	 */
	var $_authConfig;

	/**
	 * Action configuration, set by performAction(...) each time a new action needs to be authenticated.
	 * @var array
	 * @access private
	 */
	var $_actionConfig;
	
	/**
	 * Contains all auth drivers as specified in config file.
	 * @var array
	 * @access private
	 */
	var $_authDrivers = array();
}

?>
